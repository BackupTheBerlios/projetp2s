package P2S.UI.View;

import P2S.Control.Bundle.*;
import P2S.UI.View.JDialog.*;
import P2S.Control.*;
import P2S.Model.*;
import P2S.UI.Tree.*;
import P2S.UI.View.JPanel.*;
import P2S.Inf.*;
import javax.swing.tree.*;
import javax.swing.*;
import java.awt.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Vector;
import javax.swing.event.*;


/**
 * JFrame representant la fenetre principale de P2S
 * @author Fabien
 */
public class JFrameP2S extends javax.swing.JFrame {
    
    /**
     * jdialog pour se logger au depart du programme
     */
    public JDialogLogin JDialogLog;
    /**
     * jdialog pour creer un projet
     */
    public static JDialogCreerProjet FenCreerProjet;
    
    /**
     * utilisateur en cours
     */
    public Utilisateur utilisateur;
    
    DefaultMutableTreeNode racine;
    
    /** Creates new form JFrameP2S */
    public JFrameP2S() {
        // Look & Feel de l'application
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        }catch(Exception e){
            e.printStackTrace();
        }
        
        initComponents();
	
	// renderer pour l'arbre
	jTree1.setCellRenderer(new P2STreeRenderer());
        
        // taille des scrollpanes
        jScrollPane1.setPreferredSize(new Dimension(200, 200)) ;
        jScrollPane2.setPreferredSize(new Dimension(600, 600)) ;
        
        
        // Initialisation des attributs
        this.utilisateur = null;
        
        // Fen?tre plein ?cran
        this.setState(Frame.NORMAL);
        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Dimension dimension = toolkit.getScreenSize();
        Dimension position = toolkit.getScreenSize() ;        
        
        if (dimension.width > 800) {dimension.width = 800 ;}
        if (dimension.height > 600) {dimension.height = 600 ;}
        this.setSize(dimension);
        
        this.setLocation(position.width/2 - dimension.width/2, position.height/2 - dimension.height/2);
               
        
        // Affichage de la bo?te de dialogue pour se logger
        JDialogLogin JDialogLog = new JDialogLogin(this,true);
        JDialogLog.show();
        
        verifierLogin(); // Verification du login
        
        // Initialise le texte de l'application dans la Locale actuelle
        initTexte();
        
        P2S.P2S.ControllerLocale.addLocaleListener(new LocaleListener(){
            public void localeChanged() {
                initTexte();
                
                if (utilisateur != null) {
                    if (utilisateur instanceof ChefDeProjet) {
                        construireEnvironnementCDP() ;
                        PanelContenu.removeAll() ;
                        validate() ;
                    }else{
                        if (utilisateur instanceof Superviseur) {
                            construireEnvironnementSuperviseur() ;
                            PanelContenu.removeAll() ;
                            validate() ;
                        }
                    }
                    if (utilisateur instanceof Directeur) {
                        construireEnvironnementDirecteur() ;
                        PanelContenu.removeAll() ;
                        validate() ;
                    }
                }
            }
        });
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        PanelContenu = new javax.swing.JPanel();
        JMenuBar = new javax.swing.JMenuBar();
        JMenuFichier = new javax.swing.JMenu();
        JMenuItemQuitter = new javax.swing.JMenuItem();
        JMenuOutils = new javax.swing.JMenu();
        JMenuItemRafraichir = new javax.swing.JMenuItem();
        JMenuItemPreferences = new javax.swing.JMenuItem();
        JMenuAide = new javax.swing.JMenu();
        JMenuItemAProposDe = new javax.swing.JMenuItem();

        setTitle("P2S");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jScrollPane1.setBorder(null);
        jScrollPane1.setAutoscrolls(true);
        jTree1.setBorder(new javax.swing.border.EtchedBorder());
        jTree1.setAutoscrolls(true);
        jTree1.setPreferredSize(new java.awt.Dimension(150, 64));
        jScrollPane1.setViewportView(jTree1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.WEST);

        jScrollPane2.setBorder(null);
        PanelContenu.setLayout(new java.awt.BorderLayout());

        PanelContenu.setBackground(new java.awt.Color(246, 244, 249));
        PanelContenu.setBorder(new javax.swing.border.EtchedBorder());
        jScrollPane2.setViewportView(PanelContenu);

        getContentPane().add(jScrollPane2, java.awt.BorderLayout.CENTER);

        JMenuBar.setBorder(null);
        JMenuFichier.setText("Fichier");
        JMenuItemQuitter.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.ALT_MASK));
        JMenuItemQuitter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/P2S/Resources/file_quit.gif")));
        JMenuItemQuitter.setText("Quitter");
        JMenuItemQuitter.setBackground(Color.WHITE);
        JMenuItemQuitter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JMenuItemQuitterActionPerformed(evt);
            }
        });

        JMenuFichier.add(JMenuItemQuitter);

        JMenuBar.add(JMenuFichier);

        JMenuOutils.setText("Outils");
        JMenuItemRafraichir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        JMenuItemRafraichir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/P2S/Resources/tools_refresh.gif")));
        JMenuItemRafraichir.setText("Rafraichir");
        JMenuItemRafraichir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JMenuItemRafraichirActionPerformed(evt);
            }
        });

        JMenuOutils.add(JMenuItemRafraichir);

        JMenuItemPreferences.setIcon(new javax.swing.ImageIcon(getClass().getResource("/P2S/Resources/tools_prefs.gif")));
        JMenuItemPreferences.setText("Pr\u00e9f\u00e9rences...");
        JMenuItemPreferences.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JMenuItemPreferencesActionPerformed(evt);
            }
        });

        JMenuOutils.add(JMenuItemPreferences);

        JMenuBar.add(JMenuOutils);

        JMenuAide.setText("Aide");
        JMenuItemAProposDe.setText("A Propos de...");
        JMenuAide.add(JMenuItemAProposDe);

        JMenuBar.add(JMenuAide);

        setJMenuBar(JMenuBar);

        setLocation(new java.awt.Point(0, 0));
    }//GEN-END:initComponents
    
    private void JMenuItemRafraichirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JMenuItemRafraichirActionPerformed
        if(utilisateur instanceof Superviseur)
            rafraichirContenuSuperviseur();
    }//GEN-LAST:event_JMenuItemRafraichirActionPerformed
    
    private void JMenuItemQuitterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JMenuItemQuitterActionPerformed
        System.exit(0);
    }//GEN-LAST:event_JMenuItemQuitterActionPerformed
    
    private void JMenuItemCreerSupActionPerformed(java.awt.event.ActionEvent evt) {
        new JDialogCreerSuperviseur(this,true).show();
    }
    
    private void JMenuItemCreerCDPActionPerformed(java.awt.event.ActionEvent evt) {
        new JDialogCreerCDP(this,true).show();
    }
    
    private void JMenuItemPreferencesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JMenuItemPreferencesActionPerformed
        new JDialogPreferences(this,true).show();
    }//GEN-LAST:event_JMenuItemPreferencesActionPerformed
    
    private void JMenuItemCreerProjetDistantActionPerformed(java.awt.event.ActionEvent evt) {
        new JDialogAjouterProjet(this,true).show();
        // on rafraichit apres avoir ajoute
        rafraichirContenuSuperviseur() ;
    }
    
    private void JMenuItemCreerProjetLocalActionPerformed(java.awt.event.ActionEvent evt) {
                
        JFileChooser fc = new JFileChooser();
        
        // instalation d'un filtre pour fichier pgm
        FiltreFichier filtre = new FiltreFichier(new String[]{"xml"},"fichier projet");
        fc.removeChoosableFileFilter(fc.getAcceptAllFileFilter());
        fc.addChoosableFileFilter(filtre);
        
        int returnVal = fc.showOpenDialog(this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) { //Si un fichier est sélectionné
            String Fic = ((File)fc.getSelectedFile()).getAbsolutePath(); // On récupère le fichier
            
            char Flux[] = new char[500];
            int nblu;
            URL url;
            ParserXMLPreferences parserPref = new ParserXMLPreferences(P2S.P2S.readFile("P2S/preferences.xml"));
            
            try{
                // On indique qu'on va lire un nouveau fichier pour que la servlet vide son buffer de reception
                url = new URL("http://"+parserPref.lireAdresseServeur()+":"+parserPref.lirePortServeur()+"/p2sserver/MAJBDFicLocalServlet?login="+utilisateur.getLogin()+"&lecture=0&fichier="+Fic.replaceAll("\\\\","\\\\\\\\").replaceAll("\\s","%20")+"&flux=");
                BufferedReader  in = new BufferedReader(new InputStreamReader(url.openStream()));
                // On lit le fichier
                BufferedReader buffer = new BufferedReader(new FileReader(Fic));
                while((nblu = buffer.read(Flux,0,500)) != -1){
                    url = new URL("http://"+parserPref.lireAdresseServeur()+":"+parserPref.lirePortServeur()+"/p2sserver/MAJBDFicLocalServlet?login="+utilisateur.getLogin()+"&lecture=1&flux="+String.copyValueOf(Flux,0,nblu).replaceAll("\\s","%20")+"&fichier="+Fic.replaceAll("\\\\","\\\\\\\\").replaceAll("\\s","%20"));
                    in = new BufferedReader(new InputStreamReader(url.openStream()));
                }
                // On indique qu'on a fini de lire le fichier
                url = new URL("http://"+parserPref.lireAdresseServeur()+":"+parserPref.lirePortServeur()+"/p2sserver/MAJBDFicLocalServlet?login="+utilisateur.getLogin()+"&lecture=2&fichier="+Fic.replaceAll("\\\\","\\\\\\\\").replaceAll("\\s","%20")+"&flux=");
                in = new BufferedReader(new InputStreamReader(url.openStream()));
                
                String reponse = new String("");
                String inputLine;
                while ((inputLine = in.readLine()) != null)
                    reponse += inputLine;
                
                if(reponse.compareTo("1") == 0) {
                    javax.swing.JOptionPane.showMessageDialog(null, Bundle.getText("ErrorValeurNulle"), Bundle.getText("ExceptionErrorTitle"), javax.swing.JOptionPane.ERROR_MESSAGE) ;
                }
                
            }catch(IOException e){
                e.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(null, Bundle.getText("ErrorConnexionServer"), Bundle.getText("ExceptionErrorTitle"), javax.swing.JOptionPane.ERROR_MESSAGE);                
            }
        }
        
        
        // on rafraichit apres avoir ajoute
        rafraichirContenuSuperviseur() ;
    }
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm
    
    private void initTexte() {
        // Initialisation des labels de la barre de menu
        JMenuFichier.setText(Bundle.getText("JMenuFichier"));
        JMenuFichier.setMnemonic(Bundle.getChar("JMenuFichier"));
        JMenuOutils.setText(Bundle.getText("JMenuOutils"));
        JMenuOutils.setMnemonic(Bundle.getChar("JMenuOutils"));
        JMenuAide.setText(Bundle.getText("JMenuAide"));
        JMenuAide.setMnemonic(Bundle.getChar("JMenuAide"));
        
        //Initialisation des labels du menu "Fichier"
        JMenuItemQuitter.setText(Bundle.getText("JMenuItemQuitter"));
        JMenuItemQuitter.setMnemonic(Bundle.getChar("JMenuItemQuitter"));
        
        //Initialisation des labels du menu "Outils"
        JMenuItemRafraichir.setText(Bundle.getText("JMenuItemRafraichir"));
        JMenuItemRafraichir.setMnemonic(Bundle.getChar("JMenuItemRafraichir"));
        JMenuItemPreferences.setText(Bundle.getText("JMenuItemPreferences"));
        JMenuItemPreferences.setMnemonic(Bundle.getChar("JMenuItemPreferences"));
        
        //Initialisation des labels du menu "Aide"
        JMenuItemAProposDe.setText(Bundle.getText("JMenuItemAProposDe"));
        JMenuItemAProposDe.setMnemonic(Bundle.getChar("JMenuItemAProposDe"));
        
    }
    
    private void verifierLogin() {
        boolean loginOK = false;
        do
        {
            if(this.utilisateur != null) {
                loginOK = true;
                // si c'est un superviseur, on cr?e son environnement
                if(utilisateur instanceof ChefDeProjet){
                    creerEnvironnementCDP();
                }else{
                    if(this.utilisateur instanceof Superviseur) {
                        creerEnvironnementSup();
                    } else // sinon c'est un directeur
                    {
                        creerEnvironnementDir();
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, Bundle.getText("ExceptionErrorMessageLogin"), Bundle.getText("ExceptionErrorMessageLoginTitle"), JOptionPane.WARNING_MESSAGE);
                JDialogLog = new JDialogLogin(this,true);
                JDialogLog.show();
            }
        }while(!loginOK);
    }
    
    /**
     * @author : Laffargue Nicolas
     **/
    private void creerEnvironnementSup() {
        
        // On ajoute le menu "Ajouter projet distant" au menu Outils
        JMenuItemCreerProjetDistant = new JMenuItem();
	JMenuItemCreerProjetDistant.setIcon(new javax.swing.ImageIcon(getClass().getResource("/P2S/Resources/tools_addremoteproject.gif")));
        JMenuItemCreerProjetDistant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JMenuItemCreerProjetDistantActionPerformed(evt);
            }
        });
        JMenuOutils.add(JMenuItemCreerProjetDistant,0);
        
        // On ajoute le menu "Ajouter projet local" au menu Outils
        JMenuItemCreerProjetLocal = new JMenuItem();
	JMenuItemCreerProjetLocal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/P2S/Resources/tools_addlocalproject.gif")));
        JMenuItemCreerProjetLocal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JMenuItemCreerProjetLocalActionPerformed(evt);
            }
        });
        JMenuOutils.add(JMenuItemCreerProjetLocal,0);
        
        // Construction de l'arborescence
        
        // Premier noeud
        racine = new DefaultMutableTreeNode();
        
        construireEnvironnementSuperviseur() ;
        
        
    }
    
    
    private void creerEnvironnementDir() {
        //On ajoute le menu "Creer superviseur" et "Creer chef de projet" dans la barre d'outils
        JMenuItemCreerSup = new javax.swing.JMenuItem();
        JMenuItemCreerCDP = new JMenuItem();
        JMenuItemCreerSup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JMenuItemCreerSupActionPerformed(evt);
            }
        });
        
        JMenuItemCreerCDP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JMenuItemCreerCDPActionPerformed(evt);
            }
        });
        JMenuOutils.add(JMenuItemCreerSup);
        JMenuOutils.add(JMenuItemCreerCDP);
        
        racine = new DefaultMutableTreeNode() ;
        
        construireEnvironnementDirecteur() ;
        
        
    }
    
    private void creerEnvironnementCDP() {
        racine = new DefaultMutableTreeNode() ;
        
        construireEnvironnementCDP() ;
        
        
    }
    
    
    private void afficherInfoProjet(Projet proj) {
        JTabbedPaneProjet Tab = new JTabbedPaneProjet(proj);
        PanelContenu.removeAll();
        PanelContenu.add(Tab, java.awt.BorderLayout.CENTER);
        this.validate();
    }
    
    private void afficherInfoIte(Iteration ite) {
        //JPanelInfoIteration Tab = new JPanelInfoIteration(ite);
        JTabbedPaneIteration Tab = new JTabbedPaneIteration(ite);
        PanelContenu.removeAll();
        PanelContenu.add(Tab, java.awt.BorderLayout.CENTER);
        this.validate();
    }
    
    private void afficherInfoMembre(Membre membre) {
        JTabbedPaneMembre Tab = new JTabbedPaneMembre(membre);
        PanelContenu.removeAll();
        PanelContenu.add(Tab, java.awt.BorderLayout.CENTER);
        this.validate();
    }
    
    /**
     * ajoute un projet au superviseur
     * @param projet projet a ajouter
     */
    public void ajouterProjet(Projet projet) {
        // Ajout du projet dans la base de donnees
        try{
            Calendar calendarDebut = new GregorianCalendar();
            Calendar calendarFin = new GregorianCalendar();
            calendarDebut.setTime(projet.getDateDebut());
            calendarFin.setTime(projet.getDateFin());
            
            ParserXMLPreferences parserPref = new ParserXMLPreferences(P2S.P2S.readFile("P2S/preferences.xml"));
            // Envoie des infos sur le projet à la servlet "AjoutProjetServlet" pour l'ajouter a la BD
            URL url = new URL("http://"+parserPref.lireAdresseServeur()+":"+parserPref.lirePortServeur()+"/p2sserver/AjoutProjetServlet?login="+((Superviseur)this.utilisateur).getLogin() +"&nom="+projet.getNom()+"&jourDateDebut="+calendarDebut.get(Calendar.DAY_OF_MONTH)+"&moisDateDebut="+(calendarDebut.get(Calendar.MONTH)+1)+"&anneeDateDebut="+calendarDebut.get(Calendar.YEAR)+"&jourDateFin="+calendarFin.get(Calendar.DAY_OF_MONTH)+"&moisDateFin="+(calendarFin.get(Calendar.MONTH)+1)+"&anneeDateFin="+calendarFin.get(Calendar.YEAR)+"&description="+projet.getDescription());
            
            // Buffer qui va recuperer la reponse de la servlet
            BufferedReader in = new BufferedReader(
                    new InputStreamReader(
                    url.openStream()));
            
            //Recuperation de la reponse envoye par la Servlet
            String reponse = new String("");
            String inputLine;
            while ((inputLine = in.readLine()) != null)
                reponse += inputLine;
            
            if(reponse.compareTo("erreur") == 0) {
                System.out.println("Probleme lors de l'ajout du projet dans la BD");
            }
            in.close();
        } catch(MalformedURLException e1){
            e1.printStackTrace();
        } catch(IOException e2){
            e2.printStackTrace();
        }
        
        
        ((Superviseur)this.utilisateur).ajouterProjet(projet);
        
        DefaultMutableTreeNode noeud = this.racine.getNextNode();
        while(noeud.toString().compareTo(Bundle.getText("NoeudProjets")) != 0)
            noeud = noeud.getNextNode();
        
        noeud.add( new NoeudProjet(projet));
        // Met a jour l'arborescence
        jTree1.setModel(new DefaultTreeModel(racine));
    }
    
    
    /**
     * rafraichit les projets du superviseur
     *@author Conde Mike K.
     *@version 1.0
     *@see LoginServlet
     */
    public void rafraichirContenuSuperviseur() {
        /*
         ** PRINCIPE : Appel a la servlet LoginServlet mais seuls
         * les projets sont traites car le superviseur est le meme
         */
        
        try {
            
            ParserXMLPreferences parserPref = new ParserXMLPreferences(P2S.P2S.readFile("P2S/preferences.xml"));
            URL url = new URL("http://"+parserPref.lireAdresseServeur()+":"+parserPref.lirePortServeur()+"/p2sserver/LoginServlet?login="+utilisateur.getLogin()+"&password="+utilisateur.getPassword()) ;
            
            // Buffer qui va recuperer la reponse de la servlet
            BufferedReader in = new BufferedReader(
                    new InputStreamReader(
                    url.openStream()));
            
            //Recuperation du fluxXml envoye par la Servlet : LoginServlet contenant toutes les donnees de l'utilisateur
            String fluxXml = new String("");
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                fluxXml += inputLine;
            }
                       
            if(fluxXml.compareTo("") != 0) {
                ParserXMLLog parser = new ParserXMLLog(fluxXml);                
                ((Superviseur)utilisateur).setListeProjets(parser.lireProjets()) ;
            }
            in.close();
        } catch(MalformedURLException e1){
            //e1.printStackTrace();
            return ;
        } catch(IOException e2){
            //e2.printStackTrace();
            return ;
        }
        
        
        /*
         * ETAPE 2 : a ce point tout semble correct, appel de la fonction qui construit l'ihm
         */
        construireEnvironnementSuperviseur() ;
    }
    
    /**
     * Dessine/ajoute les composants graphiques dans la fenetre
     *@author Conde Mike K.
     *@version 1.0
     */
    private void construireEnvironnementSuperviseur() {
        JMenuItemCreerProjetDistant.setText(Bundle.getText("JMenuItemCreerProjetDistant"));
        JMenuItemCreerProjetDistant.setMnemonic(Bundle.getChar("JMenuItemCreerProjetDistant"));
        JMenuItemCreerProjetLocal.setText(Bundle.getText("JMenuItemCreerProjetLocal"));
        JMenuItemCreerProjetLocal.setMnemonic(Bundle.getChar("JMenuItemCreerProjetLocal"));
        racine.setUserObject(Bundle.getText("NoeudProjets")) ;
        // on efface tout
        racine.removeAllChildren() ;
        // Ajout des projets du chef de projet
        for(int i = 0 ; i < ((Superviseur) utilisateur).nbProjets(); i++){
            Projet proj = ((Superviseur) utilisateur).getProjet(i);
            NoeudProjet noeudProjet = new NoeudProjet(proj);
            
            // liste des iterations pour le projet
            for(int j=0;j<proj.getListeIt().size();j++){
                NoeudIteration noeudIteration = new NoeudIteration((Iteration)proj.getListeIt().get(j));
                noeudProjet.add(noeudIteration);
            }
            
            racine.add(noeudProjet);
        }
        // racine.add(racineProjet);
        
        // Met à jour l'arborescence
        jTree1.setModel(new DefaultTreeModel(racine));
        
        
        // Ajout du listener pour la selection d'un projet
        jTree1.addTreeSelectionListener(new TreeSelectionListener() {
            public void valueChanged(TreeSelectionEvent e) {
                // On recupere le noeud sur lequel on a clique
                DefaultMutableTreeNode d = (DefaultMutableTreeNode)e.getPath().getLastPathComponent();
                if(d instanceof NoeudProjet) // si le noeud est un projet
                    afficherInfoProjet(((NoeudProjet)d).getProjet());
                
                else if(d instanceof NoeudIteration){//Si len noeud est une iteration
                    afficherInfoIte(((NoeudIteration)d).getIteration());
                }
                // si c'est le noeud "projets"
                else if(d.getUserObject() instanceof String && d.toString().compareTo(Bundle.getText("NoeudProjets")) == 0) {
                    Vector listeProjets = new Vector();
                    for(int i=0;i<d.getChildCount();i++) {
                        listeProjets.add(((NoeudProjet)d.getChildAt(i)).getProjet());
                    }
                    
                    PanelContenu.removeAll(); // On supprime tout ce qu'il y a dans le panel contenu
                    PanelContenu.add(new JPanelTousLesProjets(listeProjets));
                    validate();
                }
            }
        }
        );
    }
    
    /**
     * Dessine/ajoute les composants graphiques dans la fenetre
     *@author Laffargue Nicolas
     *@version 1.0
     */
    private void construireEnvironnementCDP() {
        racine.setUserObject(Bundle.getText("NoeudProjets")) ;
        // on efface tout
        racine.removeAllChildren() ;
        // Ajout des projets du superviseur
        for(int i = 0 ; i < ((ChefDeProjet) utilisateur).nbProjets(); i++){
            Projet proj = ((ChefDeProjet) utilisateur).getProjet(i);
            NoeudProjet noeudProjet = new NoeudProjet(proj);
            
            // liste des iterations pour le projet
            for(int j=0;j<proj.getListeIt().size();j++){
                NoeudIteration noeudIteration = new NoeudIteration((Iteration)proj.getListeIt().get(j));
                noeudProjet.add(noeudIteration);
            }
            
            racine.add(noeudProjet);
        }
        // racine.add(racineProjet);
        
        // Met ? jour l'arborescence
        jTree1.setModel(new DefaultTreeModel(racine));
        
        
        // Ajout du listener pour la selection d'un projet
        jTree1.addTreeSelectionListener(new TreeSelectionListener() {
            public void valueChanged(TreeSelectionEvent e) {
                // On recupere le noeud sur lequel on a clique
                DefaultMutableTreeNode d = (DefaultMutableTreeNode)e.getPath().getLastPathComponent();
                if(d instanceof NoeudProjet) // si le noeud est un projet
                    afficherInfoProjet(((NoeudProjet)d).getProjet());
                
                else if(d instanceof NoeudIteration){//Si len noeud est une iteration
                    afficherInfoIte(((NoeudIteration)d).getIteration());
                }
                // si c'est le noeud "projets"
                else if(d.getUserObject() instanceof String && d.toString().compareTo(Bundle.getText("NoeudProjets")) == 0) {
                    Vector listeProjets = new Vector();
                    for(int i=0;i<d.getChildCount();i++) {
                        listeProjets.add(((NoeudProjet)d.getChildAt(i)).getProjet());
                    }
                    
                    PanelContenu.removeAll(); // On supprime tout ce qu'il y a dans le panel contenu
                    PanelContenu.add(new JPanelTousLesProjets(listeProjets));
                    validate();
                }
            }
        }
        );
    }
    
    /**
     * Dessine/ajoute les composants graphiques dans la fenetre pour le directeur
     *@author Conde Mike K.
     *@version 1.0
     */
    private void construireEnvironnementDirecteur() {
        JMenuItemCreerSup.setText(Bundle.getText("JMenuItemCreerSuperviseur"));
        JMenuItemCreerCDP.setText(Bundle.getText("JMenuItemCreerCDP"));
        // Premier noeud
        racine.setUserObject(Bundle.getText("NoeudRessources"));
        racine.removeAllChildren() ;
        
        // Ajout de toutes les ressources
        
        //Ajout de la feuille "Tous les membres"
        DefaultMutableTreeNode racineMembre = new DefaultMutableTreeNode(Bundle.getText("NoeudTousLesMembres"));
        
        // Ajout des membres
        for(int i = 0 ; i < ((Directeur) utilisateur).nbMembres(); i++){
            NoeudMembre noeudMembre = new NoeudMembre(((Directeur) utilisateur).getMembre(i));
            racineMembre.add(noeudMembre);
        }
        racine.add(racineMembre);
        
        racine.add( new DefaultMutableTreeNode(Bundle.getText("NoeudProjetsEnCours")));
        
        // Met ? jour l'arborescence
        jTree1.setModel(new DefaultTreeModel(racine));
        
        // Ajout du listener pour la selection d'un membre
        jTree1.addTreeSelectionListener(new TreeSelectionListener() {
            public void valueChanged(TreeSelectionEvent e) {
                // on recupere le noeud sur lequel on clique
                DefaultMutableTreeNode d = (DefaultMutableTreeNode)e.getPath().getLastPathComponent();
                if(d instanceof NoeudMembre) // si le noeud est un membre
                    afficherInfoMembre(((NoeudMembre)d).getMembre());
            }
        }
        );
    }
    
    
    // classe interne pour la representation de l'arborescence
    class P2STreeRenderer extends DefaultTreeCellRenderer
    {
	public P2STreeRenderer()
	{
	    
	}
	
	public Component getTreeCellRendererComponent(JTree tree, Object value, boolean sel, boolean expanded,
                            boolean leaf, int row,  boolean hasFocus) {
	    super.getTreeCellRendererComponent(
                            tree, value, sel,
                            expanded, leaf, row,
                            hasFocus);
	    // cas ou c'est des membres
	    if (value instanceof NoeudMembre)
	    {
		// noeud terminal
		/*if (leaf)
		{
		    System.out.println("Membre terminal") ;
		}
		// non terminal
		else
		{
		    System.out.println("Membre non terminal") ;
		}*/
		setIcon(new javax.swing.ImageIcon(getClass().getResource("/P2S/Resources/tree_members.gif")));
	    }
	    // cas ou c'est des projets
	    if (value instanceof NoeudProjet)
	    {
		setIcon(new javax.swing.ImageIcon(getClass().getResource("/P2S/Resources/tree_projects.gif")));
	    }
	    return this ;
	}
    }

    
    private JMenuItem JMenuItemCreerProjetDistant ;
    private JMenuItem JMenuItemCreerProjetLocal ;
    private JMenuItem JMenuItemCreerCDP ;
    private JMenuItem JMenuItemCreerSup ;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu JMenuAide;
    private javax.swing.JMenuBar JMenuBar;
    private javax.swing.JMenu JMenuFichier;
    private javax.swing.JMenuItem JMenuItemAProposDe;
    private javax.swing.JMenuItem JMenuItemPreferences;
    private javax.swing.JMenuItem JMenuItemQuitter;
    private javax.swing.JMenuItem JMenuItemRafraichir;
    private javax.swing.JMenu JMenuOutils;
    private javax.swing.JPanel PanelContenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables
    
}

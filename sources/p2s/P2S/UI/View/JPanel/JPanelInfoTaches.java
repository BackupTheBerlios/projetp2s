/*
 * JPanelInfoTaches.java
 *
 * Created on 23 février 2005, 10:41
 */

package P2S.UI.View.JPanel;


import java.util.Vector ;
import P2S.Model.Tache;  
import javax.swing.* ;
import P2S.Control.Bundle.Bundle ;
import P2S.UI.View.JDialog.JDialogDetailTache;
import P2S.UI.View.JDialog.ModeleTableMesure;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import javax.swing.JTable ;
import javax.swing.table.TableCellRenderer;


/** represente la liste des taches passes dans le constructeur
 *
 * @author  Conde Mike K
 */
public class JPanelInfoTaches extends javax.swing.JPanel {
    
    private JLabel nomTache ;
    private JButton boutonDetails ;
    private JTable tableTaches ;
    private String[] titresColonnes = {Bundle.getText("JTableTachesColonne1"),
                Bundle.getText("JTableTachesColonne2"),
                Bundle.getText("JTableTachesColonne3"),
                Bundle.getText("JTableTachesColonne4"),
                Bundle.getText("JTableTachesColonne5"),
                Bundle.getText("JTableTachesColonne6")} ;
    private Object[][] donnees = null ;
    private Vector taches ;
    
    /** Creates new form JPanelInfoTaches */
    public JPanelInfoTaches (Vector taches) {
        this.taches = taches ;
        
        //System.out.println(getRootPane()) ;
        //System.out.println(getParent()) ;
        donnees = new Object[taches.size()][6] ;
        for (int i = 0 ; i < donnees.length ; i++)
        {
            if (taches.get(i) instanceof Tache)
            {
                donnees[i][0] = ((Tache)taches.get(i)).getNom() ;
                donnees[i][1] = ((Tache)taches.get(i)).getEtat() ;
                donnees[i][2] = ((Tache)taches.get(i)).getChargePrevue() ;
                donnees[i][3] = ((Tache)taches.get(i)).getTempsPasse() ;
                donnees[i][4] = ((Tache)taches.get(i)).getResteAPasser() ;
                donnees[i][5] = new JButton(Bundle.getText("JTableTachesDetails")) ;
            }
        }
                
        ModeleTableTaches tableModel = new ModeleTableTaches(donnees, titresColonnes) ;
        
        initComponents ();
        
        table.setModel(tableModel) ;
        table.setDefaultRenderer(Integer.class, new NumericRenderer()) ;
        table.setDefaultRenderer(String.class, new StatusRenderer()) ;
        table.setDefaultRenderer(JButton.class, new ButtonRenderer()) ;
        table.setDefaultEditor(JButton.class, new ButtonEditor(this)) ;

    }    

    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
    
    
    /** classe TaskTableModel permet l'edition uniquement a la dernier colonne pour voir les details
    * @author C Mike K
    * @version 1.0
    */
    class ModeleTableTaches extends ModeleTableMesure
    {
        public ModeleTableTaches(Object donnees[][], String titres[]) {
            super(donnees, titres) ;
        }
        
        public boolean isCellEditable(int row, int col) {
            return (col == 5) ;
        }
    }
    
    
    /** classe NumericRenderer
    * @author C Mike K
    * @version 1.0
    */
   class NumericRenderer implements TableCellRenderer
   {
      private JFormattedTextField numericField = new JFormattedTextField() ;

      public NumericRenderer()
      {
         numericField.setHorizontalAlignment(JTextField.RIGHT) ;
         numericField.setBorder(BorderFactory.createEmptyBorder()) ;
      }

      public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)
      {
         numericField.setValue(value + " " +Bundle.getText("Constante_heures")) ;
         return numericField ;
      }

   } // fin de la classe NumericRenderer
   
   /** classe ButtonRenderer
    * @author C Mike K
    * @version 1.0
    */
   class ButtonRenderer implements TableCellRenderer
   {
      private JButton details = null ;

      public ButtonRenderer()
      {
         details = new JButton(Bundle.getText("JTableTachesDetails")) ;
      }

      public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)
      {
         details.setText(((JButton)value).getText()) ;
         return details ;
      }

   } // fin de la classe ButtonRenderer
   
   
   /** classe ButtonRenderer
    * @author C Mike K
    * @version 1.0
    */
   class ButtonEditor extends DefaultCellEditor
   {
      private JButton details = null ;
      private JPanelInfoTaches owner ;

      public ButtonEditor(JPanelInfoTaches owner)
      {
         super (new JTextField()) ;
         this.owner = owner ;
         
         editorComponent = new JButton(Bundle.getText("JTableTachesDetails")) ;
            ((JButton)editorComponent).addActionListener(new java.awt.event.ActionListener() {
               public void actionPerformed(ActionEvent e) {
                  new JDialogDetailTache(null, true, (Tache)taches.get(0)) ;
               }
           }) ;
      }

      public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)
      {
         details.setText(((JButton)value).getText()) ;
         return details ;
      }

   } // fin de la classe ButtonEditor
   
   /** classe StatusRenderer
    * @author C Mike K
    * @version 1.0
    */
   class StatusRenderer implements TableCellRenderer
   {
      private JFormattedTextField statusField = new JFormattedTextField() ;

      public StatusRenderer()
      {
         statusField.setHorizontalAlignment(JTextField.LEFT) ;
         statusField.setBorder(BorderFactory.createEmptyBorder()) ;
      }

      public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)
      {
          statusField.setValue(value) ;
          // on le fait uniquement pour la colonne etat
          if (column == 1)
          {
             statusField.setValue(Bundle.getText("Constante_tache"+value)) ;
             if (((String)value).equals("1"))
             {
                 statusField.setForeground(new Color(20, 20, 250)) ;
             }
             if (((String)value).equals("3"))
             {
                 statusField.setForeground(new Color(250, 20, 20)) ;
             }             
          }
          else
          {
              statusField.setForeground(new Color(0, 0, 0)) ;
                       
          }
          return statusField ;
      }

   } // fin de la classe NumericRenderer
   
}
